# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool: <POOL_NAME>

steps:
  - task: PowerShell@2
    displayName: Install CodeQl bundle
    inputs:
      targetType: 'inline'
      script: |
    
        "[*] Define variables"
        $agentToolDirectory = $env:AGENT_TOOLSDIRECTORY
        $codeqlDirectory = Join-Path -Path $agentToolDirectory -ChildPath "CodeQL"
        $codeqlReleaseBundleTag = "codeql-bundle-v2.15.1"  # Change this to the desired release tag
        $codeqlVersionedDirectory = Join-Path -Path $codeqlDirectory -ChildPath "0.0.0-$codeqlReleaseBundleTag/x64"
        $completeFilePath = Join-Path -Path $codeqlDirectory -ChildPath "0.0.0-$codeqlReleaseBundleTag/x64.complete"
        
        "[*] Step 1: Download the latest CodeQL release bundle from GitHub"
        $codeqlReleaseUrl = "https://github.com/github/codeql-action/releases/download/$codeqlReleaseBundleTag/codeql-bundle-linux64.tar.gz"
        $codeqlBundleTarGzPath = Join-Path -Path $agentToolDirectory  -ChildPath "codeql-bundle.tar.gz"
        Invoke-WebRequest -Uri $codeqlReleaseUrl -OutFile $codeqlBundleTarGzPath

        "[*] Step 2: Extract the bundle"
        New-Item -Path $codeqlVersionedDirectory -ItemType Directory -Force
        tar -xvzf  $codeqlBundleTarGzPath -C $codeqlVersionedDirectory
      
        "[*] Step 3: Create an empty file"
        New-Item -Path $completeFilePath -ItemType File -Force

        "[*] Cleanup: Remove the downloaded zip file"
        Remove-Item -Path $codeqlBundleTarGzPath

  - task: AdvancedSecurity-Codeql-Init@1
    displayName: GHAzDo codeql init
    inputs:
      languages: "csharp"

  #- task: AdvancedSecurity-Codeql-Autobuild@1
  #  displayName: GHAzDo codeql auto build

  # It's possible that the the autobuild step does not execute, specifically if you are scanning a language like cpp, java, csharp, or swift.
  # If the above does not execute correctly, you can replace the Autobuild task with your customized build. E.g.:

  # If you had a Maven app:
  #   - task: Maven@4
  #     inputs:
  #       mavenPomFile: 'pom.xml'
  #       publishJUnitResults: true
  #       testResultsFiles: '**/TEST-*.xml'
  #       javaHomeOption: 'JDKVersion'
  #       jdkVersionOption: '1.17'
  #       mavenVersionOption: 'Default'

  # Or a general script:
  #   - script: |
  #       echo "Run, Build Application using script"
  #       ./location_of_script_within_repo/buildscript.sh

  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk 7.0.x'
    inputs:
      packageType: 'sdk'
      version: '7.0.x'
  - task: DotNetCoreCLI@2
    displayName: Build .NET web app
    inputs:
      command: 'build'
      projects: '**/*.csproj'
  - task: AdvancedSecurity-Dependency-Scanning@1 # More details on this task: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/advanced-security-dependency-scanning-v1?view=azure-pipelines
    displayName: GHAzDo dependency scanning
  - task: AdvancedSecurity-Codeql-Analyze@1 # More details on this task: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/advanced-security-codeql-analyze-v1?view=azure-pipelines
    displayName: GHAzDo codeql analyze
